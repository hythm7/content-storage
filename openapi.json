{
  "openapi": "3.0.3",
  "info": {
    "title": "Distribution Storage",
    "description": "Raku Distribution Storage",
    "contact": {
      "email": "api@content-storage.pakku.org"
    },
    "license": {
      "name": "Artistic License 2.0",
      "url": "https://spdx.org/licenses/Artistic-2.0.html"
    },
    "version": "1"
  },
  "servers": [
    {
      "url": "https://content-storage.pakku.org/api/v1"
    }
  ],
  "tags": [
    {
      "name": "distribution",
      "description": "Everything about distribution",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "build",
      "description": "Build",
      "externalDocs": {
        "description": "Find out more about our build",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/distribution": {
      "get": {    
        "summary": "List distributions",
        "operationId": "readDistribution",
        "tags": [
          "distribution"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name to filter by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],  
        "responses": {
          "200": {
            "description": "An paged array of distributions",
            "headers": {
              "x-next": {
                "description": "A link to the next page of responses",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Distributions"
                }
              }   
            }   
          },  
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }   
      }
    },
    "/distribution/{distributionId}": {
      "get": {
        "tags": [
          "distribution"
        ],
        "summary": "Find distribution by ID",
        "description": "Returns a single distribution",
        "operationId": "readDistributionById",
        "parameters": [
          {
            "name": "distributionId",
            "in": "path",
            "description": "ID of distribution to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Distribution"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Distribution not found"
          }
        }
      },
      "delete": {
        "tags": [
          "distribution"
        ],
        "summary": "Deletes a distribution",
        "description": "delete a distribution",
        "operationId": "deleteDistributionById",
        "parameters": [
          {
            "name": "distributionId",
            "in": "path",
            "description": "Distribution id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Distribution"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Distribution not found"
          }
        }
      }
    },
    "/build": {
      "get": {    
        "summary": "List all builds",
        "operationId": "readBuild",
        "tags": [
          "build"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name to filter by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],  
        "responses": {
          "200": {
            "description": "An paged array of builds",
            "headers": {
              "x-next": {
                "description": "A link to the next page of responses",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Builds"
                }
              }   
            }   
          },  
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }   
      },
      "post": {
        "tags": [
          "build"
        ],
        "summary": "Add Distribution",
        "description": "This can only be done by the logged in user.",
        "operationId": "buildDistribution",
        "requestBody": {
          "description": "Created build object",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Build"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              }
            }
          }
        }
      }
    },
    "/build/{buildId}": {
      "get": {
        "tags": [
          "build"
        ],
        "summary": "Read build by ID",
        "description": "Returns a single build",
        "operationId": "readBuildById",
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "description": "ID of build to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Build not found"
          }
        }
      },
      "delete": {
        "tags": [
          "build"
        ],
        "summary": "Deletes a build",
        "description": "delete a build",
        "operationId": "deleteBuildById",
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "description": "Build id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Build ID supplied"
          },
          "404": {
            "description": "Build not found"
          }
        }
      }
    },
    "/user": {
      "get": {
        "summary": "List users",
        "operationId": "readUser",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name to filter by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],  
        "responses": {
          "200": {
            "description": "An paged array of users",
            "headers": {
              "x-next": {
                "description": "A link to the next page of responses",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }   
            }   
          },  
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }   
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user id",
        "description": "",
        "operationId": "readUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id that needs to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes a user",
        "description": "delete a user",
        "operationId": "deleteUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/{userId}/info": {
      "put": {
        "tags": [
          "user",
          "info"
        ],
        "summary": "Update user info",
        "description": "",
        "operationId": "updateUserInfo",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id that needs to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update user info",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized!"
          }
        }
      }
    },
    "/user/{userId}/password": {
      "put": {
        "tags": [
          "user",
          "password"
        ],
        "summary": "Update user password",
        "description": "",
        "operationId": "updateUserPassword",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id that needs to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update user password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Invalid userid supplied"
          }
        }
      }
    },
    "/user/{userId}/admin": {
      "put": {
        "tags": [
          "user",
          "admin"
        ],
        "summary": "Update user admin",
        "description": "",
        "operationId": "updateUserAdmin",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id that needs to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update user admin",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Invalid userid supplied"
          }
        }
      }
    },
    "/user/{username}/distribution": {
      "get": {
        "tags": [
          "user",
          "distribution"
        ],
        "summary": "Get distributions by username",
        "description": "Get distributions by username",
        "operationId": "readUserDistributions",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name to filter by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Distributions"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/{username}/build": {
      "get": {
        "tags": [
          "user",
          "build"
        ],
        "summary": "Get builds by username",
        "description": "Get builds by username",
        "operationId": "readUserBuilds",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name to filter by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Builds"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "requestBody": {
          "description": "Login user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "403": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Register user into the system",
        "description": "",
        "operationId": "registerUser",
        "requestBody": {
          "description": "Create a new user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Distribution": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "28e3d63e-1abd-4e5e-89c0-757266ef7868"
          },
          "user": {
            "type": "string",
            "example": "john"
          },
          "meta": {
            "type": "string",
            "example": "SUCCESS"
          },
          "name": {
            "type": "string",
            "example": "Name"
          },
          "version": {
            "type": "string",
            "example": "0.0.1"
          },
          "auth": {
            "type": "string",
            "example": "raku:username"
          },
          "api": {
            "type": "string",
            "nullable": true,
            "example": "1"
          },
          "created": {
            "type": "string",
            "example": "2024-05-19 10:46:51"
          }
        }
      },
      "Build": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "28e3d63e-1abd-4e5e-89c0-757266ef7868"
          },
          "status": {
            "type": "integer",
            "example": 0
          },
          "user": {
            "type": "string",
            "example": "john"
          },
          "filename": {
            "type": "string",
            "example": "filename"
          },
          "meta": {
            "type": "integer",
            "example": 0
          },
          "name": {
            "type": "string",
            "example": "Name"
          },
          "version": {
            "type": "string",
            "example": "0.0.1"
          },
          "auth": {
            "type": "string",
            "example": "raku:username"
          },
          "api": {
            "type": "string",
            "nullable": true,
            "example": "1"
          },
          "test": {
            "type": "integer",
            "example": 0
          },
          "started": {
            "type": "string",
            "example": "2024-05-19 10:46:51"
          },
          "completed": {
            "type": "string",
            "example": "2024-05-19 10:46:51"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "28e3d63e-1abd-4e5e-89c0-757266ef7868"
          },
          "userName": {
            "type": "string",
            "example": "theUser"
          },
          "firstname": {
            "type": "string",
            "nullable": true,
            "example": "John"
          },
          "lastname": {
            "type": "string",
            "nullable": true,
            "example": "James"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          }
        }
      },
      "Distributions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Distribution"
        }
      },
      "Builds": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Build"
        }
      },
      "Users": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/User"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Error": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "requestBodies": {
      "Build": {
        "description": "Build object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Build"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    }
  }
}
