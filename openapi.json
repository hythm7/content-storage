{
  "openapi": "3.0.3",
  "info": {
    "title": "Distribution Storage",
    "description": "Raku Distribution Storage",
    "contact": {
      "email": "api@content-storage.pakku.org"
    },
    "license": {
      "name": "Artistic License 2.0",
      "url": "https://spdx.org/licenses/Artistic-2.0.html"
    },
    "version": "1"
  },
  "servers": [
    {
      "url": "https://content-storage.pakku.org/api/v1"
    }
  ],
  "tags": [
    {
      "name": "distribution",
      "description": "Everything about distribution",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "build",
      "description": "Build",
      "externalDocs": {
        "description": "Find out more about our build",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/distribution": {
      "get": {    
        "summary": "List distributions",
        "operationId": "readDistribution",
        "tags": [
          "build"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name to filter by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],  
        "responses": {
          "200": {
            "description": "An paged array of distributions",
            "headers": {
              "x-next": {
                "description": "A link to the next page of responses",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Distributions"
                }
              }   
            }   
          },  
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }   
      },
      "post": {
        "tags": [
          "distribution"
        ],
        "summary": "Add a new distribution to the storage",
        "description": "Add a new distribution to the storage",
        "operationId": "addDistribution",
        "requestBody": {
          "description": "Create a new distribution in the storage",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Distribution"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Distribution"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Distribution"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "422": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/distribution/{distributionId}": {
      "get": {
        "tags": [
          "distribution"
        ],
        "summary": "Find distribution by ID",
        "description": "Returns a single distribution",
        "operationId": "readDistributionById",
        "parameters": [
          {
            "name": "distributionId",
            "in": "path",
            "description": "ID of distribution to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Distribution"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Distribution not found"
          }
        }
      },
      "delete": {
        "tags": [
          "distribution"
        ],
        "summary": "Deletes a distribution",
        "description": "delete a distribution",
        "operationId": "deleteDistribution",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "distributionId",
            "in": "path",
            "description": "Distribution id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid distribution value"
          }
        }
      }
    },
    "/distribution/{distributionId}/uploadImage": {
      "post": {
        "tags": [
          "distribution"
        ],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "distributionId",
            "in": "path",
            "description": "ID of distribution to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "additionalMetadata",
            "in": "query",
            "description": "Additional Metadata",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/build": {
      "get": {    
        "summary": "List all builds",
        "operationId": "readBuild",
        "tags": [
          "build"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name to filter by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],  
        "responses": {
          "200": {
            "description": "An paged array of builds",
            "headers": {
              "x-next": {
                "description": "A link to the next page of responses",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Builds"
                }
              }   
            }   
          },  
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }   
      },
      "post": {
        "tags": [
          "build"
        ],
        "summary": "Add Distribution",
        "description": "This can only be done by the logged in user.",
        "operationId": "buildDistribution",
        "requestBody": {
          "description": "Created build object",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Build"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/build/{buildId}": {
      "get": {
        "tags": [
          "build"
        ],
        "summary": "Read build by ID",
        "description": "Returns a single build",
        "operationId": "readBuildById",
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "description": "ID of build to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Build"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Build not found"
          }
        }
      },
      "delete": {
        "tags": [
          "build"
        ],
        "summary": "Deletes a build",
        "description": "delete a build",
        "operationId": "deleteBuildById",
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "description": "Build id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid build value"
          }
        }
      }
    },
    "/build/{buildId}/log": {
      "get": {
        "tags": [
          "build"
        ],
        "summary": "build log",
        "description": "",
        "operationId": "readBuildLogById",
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "description": "ID of build to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {    
        "summary": "List all users",
        "operationId": "readUser",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],  
        "responses": {
          "200": {
            "description": "An paged array of users",
            "headers": {
              "x-next": {
                "description": "A link to the next page of responses",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }   
            }   
          },  
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }   
      }   
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/password": {
      "put": {
        "tags": [
          "user",
          "password"
        ],
        "summary": "Update user password",
        "description": "",
        "operationId": "updateUserPassword",
        "requestBody": {
          "description": "Update user password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Invalid username supplied"
          }
        }
      }
    },
    "/user/{username}/distribution": {
      "get": {
        "tags": [
          "user",
          "distribution"
        ],
        "summary": "Get distributions by username",
        "description": "Get distributions by username",
        "operationId": "readUserDistributions",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name to filter by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Distributions"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/{username}/build": {
      "get": {
        "tags": [
          "user",
          "build"
        ],
        "summary": "Get builds by username",
        "description": "Get builds by username",
        "operationId": "readUserBuilds",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name to filter by",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Builds"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Create user",
        "description": "Register user.",
        "operationId": "userCreate",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "requestBody": {
          "description": "Login user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Register user into the system",
        "description": "",
        "operationId": "registerUser",
        "requestBody": {
          "description": "Create a new user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/search/build": {
      "get": {
        "tags": [
          "search",
          "build"
        ],
        "summary": "Search Build ",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "searchBuild",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name to filter by",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Current page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Build"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid build name"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Distribution": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": 42
          },
          "user": {
            "type": "string",
            "example": "john"
          },
          "meta": {
            "type": "string",
            "example": "SUCCESS"
          },
          "name": {
            "type": "string",
            "example": "Name"
          },
          "version": {
            "type": "string",
            "example": "0.0.1"
          },
          "auth": {
            "type": "string",
            "example": "raku:username"
          },
          "api": {
            "type": "string",
            "example": "1"
          },
          "created": {
            "type": "string",
            "example": "2024-05-19 10:46:51"
          }
        }
      },
      "Build": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": 42
          },
          "status": {
            "type": "string",
            "example": "RUNNING"
          },
          "user": {
            "type": "string",
            "example": "john"
          },
          "filename": {
            "type": "string",
            "example": "filename"
          },
          "meta": {
            "type": "string",
            "example": "SUCCESS"
          },
          "name": {
            "type": "string",
            "example": "Name"
          },
          "version": {
            "type": "string",
            "example": "0.0.1"
          },
          "auth": {
            "type": "string",
            "example": "raku:username"
          },
          "api": {
            "type": "string",
            "example": "1"
          },
          "test": {
            "type": "string",
            "example": "SUCCESS"
          },
          "started": {
            "type": "string",
            "example": "2024-05-19 10:46:51"
          },
          "completed": {
            "type": "string",
            "example": "2024-05-19 10:46:51"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        }
      },
      "Distributions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Distribution"
        }
      },
      "Builds": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Build"
        }
      },
      "Users": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/User"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Error": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "requestBodies": {
      "Build": {
        "description": "Build object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Build"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    }
  }
}
